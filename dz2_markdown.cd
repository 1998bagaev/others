# Глава 7. Поддержка.Формат

[Поддержка формата](http://www.boost.org/doc/libs/1_62_0/libs/format/) предлагает замену функции <std::printf().> <std::printf()>, взятой  
из стандарта си и позволяет форматировать вывод данных. Однако, она является ни
типизированной, ни расширяемой.Поддержка.формат обеспечивает безопасность типов и расширяемую альтернативу.

Поддержка.формат предоставляет класс, называющийся <boost::format>, который определен в `boost/format.hpp`.   
Схожа со  <std::printf()>, строка, содержащая специальные символы для управления форматированием, передается   
в конструктор  <boost::format>. Данные, замещающие эти специальные символы в  
выходных данных, связаны с помощью оператора <operator%>.
```
Пример 7.1. Форматированный вывод с <boost::format>
```
`#include <boost/format.hpp>`  
`#include <iostream>`  
<int> main()  
{  
  <std::cout> << boost::format{"%1%.%2%.%3%"} % 12 % 5 % 2014 << '\n';  
}  
---
Строка формата Поддержка.формат использует номера, помещенные между двумя знаками процента в качестве заполнителей
для фактических данных, которые будут связаны с использованием <operator%>.
[Пример 7.1](http://theboostcpplibraries.com/boost.format#ex.format_01/ "Пример 7.1 Форматированный вывод с boost::format") создает строку даты в виде 12.5.2014 , используя номера  12, 5 и 2014 в качестве данных. Для того, чтобы месяц появлялся перед днем, как используется в Соединённых штатах Америки, заполнители могут поменяться местами.
[Пример 7.2](http://theboostcpplibraries.com/boost.format#ex.format_02/ "Пример 7.2 Номерные заполнители с помощью boost::format") делает это изменение, отображая как 5/12/2014  
```
Пример 7.2. Номерные заполнители с помощью <boost::format> 
```
`#include <boost/format.hpp>`  
`#include <iostream>`  

<int> main()  
{  
  <std::cout> << boost::format{"%2%/%1%/%3%"} % 12 % 5 % 2014 << '\n';  
}  
---
Для форматирования данных с помощью манипуляторов, Поддержка.формат предоставляет функцию,называемую   
<boost::io::group().>
```
Пример 7.3: Использование манипуляторов с  <boost::io::group()>
```
`#include <boost/format.hpp>`  
`#include <iostream>`

<int> main()  
{  
  <std::cout> << boost::format{"%1% %2% %1%"} %  
    boost::io::group(<std>::showpos, 1) % 2 << '\n';  
}
---
[Пример 7.3](http://theboostcpplibraries.com/boost.format#ex.format_03/ "Пример 7.3 Использование манипуляторов с boost::io::group()") использует манипулятор  <std::showpos()> для значения, которое будет связано с "% 1%.Таким образом, этот пример будет отображать +1 2 +1 в качестве вывода.  
Поскольку манипулятор <std::showpos()>  был связан с первым значением данных с использованием <boost::io::group()> знак плюс автоматически добавляется всякий раз, когда отображается это значение.В этом случае формат заполнитель "% 1%"  
используется дважды.  

Если знак плюс должен быть показан только для первого выхода 1, формат заполнитель должен быть изменен.  
```
Пример 7.4. Заполнители со специальными символами
```
`#include <boost/format.hpp>`  
`#include <iostream>` 

<int> main()  
{  
  <std::cout> << boost::format{"%|1$+| %2% %1%"} % 1 % 2 << '\n';  
}
---
[Пример 7.4](http://theboostcpplibraries.com/boost.format#ex.format_04/ "Пример 7.4 Заполнители со специальными символами" ) делает это.В этом примере первый экземпляр заполнителя "%1%" заменяется на "%1$|+|".Настройка формата не просто добавляет два дополнительных знака для труб.  
Ссылка на данные также помещена между знаками труб и использует "1 $" вместо "1%". 
Это требуется для модифицирования выхода, чтобы было +1 2 1. Вы можете найти подробную информацию о спецификации формата  
в [документации поддержки](http://www.boost.org/doc/libs/1_62_0/libs/format/doc/format.html#printf_directives).

Ссылки на заполнители данных должны быть указаны или для всех заполнителей или не для кого.
```
Пример 7.5. <boost::io::format_error> в случае ошибки
```
`#include <boost/format.hpp>` 
`#include <iostream>`  

<int> main()  
{  
  <try>  
  {  
    <std::cout> << boost::format{"%|+| %2% %1%"} % 1 % 2 << '\n';  
  }  
  <catch> (boost::io::format_error &ex)  
  {  
    <std::cout> << ex.what() << '\n';  
  }  
}  
---
[Пример 7.5](http://theboostcpplibraries.com/boost.format#ex.format_05/ "Пример 7.5 boost::io::format_error в случае ошибки") генерирует исключение типа <boost::io::format_error.>  
Cтрого говоря, Поддержка.формат генерирует <boost::io::bad_format_string.>Однако,так как различные классы исключений являются  
производными от <boost::io::format_error>,обычно поймать исключения этого типа проще.  

[Пример 7.6](http://theboostcpplibraries.com/boost.format#ex.format_06/ "Пример 7.6 Заполнители без номеров") показывает, как написать программу без использования ссылок в формате строки.
```
Пример 7.6. Заполнители без номеров
```
`#include <boost/format.hpp>`  
`#include <iostream>`  

int main()  
{  
  std::cout << boost::format{"%|+| %|| %||"} % 1 % 2 % 1 << '\n';  
}  
----
Знаки трубы для второго и третьего заполнителя можно безопасно опустить в данном случае,потому что  
они не указывают формат.Полученный синтаксис чем то напоминает std::printf() 
(смотри [Пример 7.7](http://theboostcpplibraries.com/boost.format#ex.format_07/ "Пример 7.7 boost::format c синтаксисом, используемым из std::printf()").
```
Пример 7.7. <boost::format c синтаксисом>, используемым из <std::printf()>
```
`#include <boost/format.hpp>`  
`#include <iostream>`  

<int> main()  
{  
  <std::cout> << boost::format{"%+d %d %d"} % 1 % 2 % 1 << '\n';  
} 
---
Пока формат может выглядеть как тот, что используется <std::printf()>,Поддержка.формат обеспечивает преимущество безопасности типов. Буква "d" в формате строки не указывает на вывод числа. Вместо этого он применяет манипулятор <std::dec()> на внутренний объект потока, используемый форматом Поддержка.формат.Это делает возможным указывать строки формата,что не имело бы никакого смысла для <std::printf()> и может привести к аварии.
```
 Пример 7.8. <boost::format> с, казалось бы, недействительными заполнителями
```
`#include <boost/format.hpp>`  
`#include <iostream>`  

<int> main()  
{  
  <std::cout> << boost::format{"%+s %s %s"} % 1 % 2 % 1 << '\n';  
}
---
<std::printf()> допускает букву 's' только для строк типа <const char*>. С <std::printf()>, сочетание "%S" и числовое значение потерпит неудачу.Тем не менее, [пример 7.8](http://theboostcpplibraries.com/boost.format#ex.format_08/ "Пример 7.8 boost::format с, казалось бы, недействительными заполнителями") работает отлично.  
Поддержка.формат не требует строки. Вместо этого он применяет соответствующие манипуляторы  
для настройки внутреннего потока.

Поддержка.формат является и безопасным, и расширяемым типом.Объекты любого типа могут быть использованы с Поддержка.формат до тех пор, пока оператор <operator<<> перегружен для <std::ostream>.
```
Пример 7.9.<boost::format> с определяемым пользовательским типом
````
`#include <boost/format.hpp>`  
`#include <string>`  
`#include <iostream>`  

struct animal  
{  
  <std::string> name;  
  <int> legs;  
};

<std>::ostream &<operator><<(<std>::ostream &os, <const> animal &a)  
{  
  return os << a.name << ',' << a.legs;  
}

<int> main()  
{  
  animal a{"cat", 4};  
  <std::cout> << boost::format{"%1%"} % a << '\n';  
}
---
[Пример 7.9](http://theboostcpplibraries.com/boost.format#ex.format_09/ "Пример 7.9 boost::format с определяемым пользовательским типом") использует <boost::format> для записи объекта определяемого пользователем <animal> для 
стандартного вывода. Это возможно, потому что оператор потока перегружен для класса <animal>.




# Глава 10. Формат.Токенизатор  
Библиотека [Формат.Токенизатор](http://www.boost.org/doc/libs/1_62_0/libs/tokenizer/) позволяет перебирать частичные выражения в строке путем интерпретации определенных символов в качестве разделителей.
```
Пример 10.1. Перебор частичных выражений в строке с <boost::tokenizer>
```
`#include <boost/tokenizer.hpp>` 
`#include <string>`  
`#include <iostream>`  

<int> main()  
{  
  <typedef> boost::tokenizer<boost::char_separator<char>> tokenizer;  
  <std::string> s = "Boost C++ Libraries";  
  tokenizer tok{s};  
  <for> (tokenizer::iterator it = tok.begin(); it != tok.end(); ++it)  
    <std::cout> << *it << '\n';  
}  
---
Формат.Токенизатор определяет шаблон класса под названием  <boost::tokenizer> в `boost/tokenizer.hpp`. Он ожидает параметр шаблона класса, который идентифицирует когерентные выражения. [Пример 10.1](http://theboostcpplibraries.com/boost.tokenizer#ex.tokenizer_01/ "Пример 10.1. Перебор частичных выражений в строке с boost::tokenizer") использует класс boost::char_separator, который 
распознаёт пробелы и знаки препинания как разделители.

Токенизатор должен быть инициализирован со строкой типа  <std::string.> Используя функции-члены <begin()> и <end()>, к токенизатору можно обращаться как к контейнеру. Частичные выражения строки, используемой для инициализации токенизатора, доступны через итераторы. Как частичные выражения оцениваются, зависит от вида класса, переданного в качестве параметра шаблона.

Поскольку <boost::char_separator>  интерпретирует пробелы и знаки препинания как разделители по умолчанию, [Пример 10.1](http://theboostcpplibraries.com/boost.tokenizer#ex.tokenizer_01/ "Перебор частичных выражений в строке с boost::tokenizer") отображает Поддержку,С,+,+ и библиотеки.  <boost::char_separator> использует <std::isspace()> и <std::ispunct()> чтобы идентифицировать символы разделителя. Формат.Токенизатор проводит различие между разделителями, которые должны быть отображены и разделителями, которые должны быть скрыты. По умолчанию, пробелы скрыты и отображаются знаки препинания.
```
Пример 10.1. Инициализация <boost::char_separator> для применения повтора
```
`#include <boost/tokenizer.hpp>`  
`#include <string>`  
`#include <iostream>`  

<int> main()  
{  
  <typedef> boost::tokenizer<boost::char_separator<char>> tokenizer;  
  <std::string> s = "Boost C++ Libraries";  
  boost::char_separator<char> sep{" "};  
  tokenizer tok{s, sep};  
  <for> (<const auto> &t : tok)  
    <std::cout> << t << '\n';  
}
---
Чтобы удержать знаки препинания от интерпретации в качестве разделителей, инициализировуйте объект <boost::char_separator>  перед передачей его в токенизатор.

Конструктор  <boost::char_separator> принимает в общей сложности три параметра, но только первый из них требуемый.Первый параметр описывает индивидуальные разделители, которые скрыты. [Пример 10.2](http://theboostcpplibraries.com/boost.tokenizer#ex.tokenizer_02/ "Пример 10.1. Инициализация boost::char_separator для применения повтора"), как и [пример 10.1](http://theboostcpplibraries.com/boost.tokenizer#ex.tokenizer_01/ "Пример 10.1. Перебор частичных выражений в строке с boost::tokenizer"), обрабатывает пробелы в качестве разделителей.

Второй параметр определяет разделители, которые должны быть отображены.Если этот параметр опущен,разделители не отобразятся, и программа не отобразит Поддержку, C +,+ и библиотеки.
```
Пример 10.3. Моделирование поведения по умолчанию с  <boost::char_separator>
```
`#include <boost/tokenizer.hpp>`  
`#include <string>`  
`#include <iostream>`  

int main()  
{  
  <typedef> boost::tokenizer<boost::char_separator<char>> tokenizer;  
  <std::string> s = "Boost C++ Libraries";  
  boost::char_separator<char> sep{" ", "+"};  
  tokenizer tok{s, sep};  
  <for> (<const auto> &t : tok)  
    <std::cout> << t << '\n';  
}
---
Если знак плюс передается в качестве второго параметра, [пример 10.3](http://theboostcpplibraries.com/boost.tokenizer#ex.tokenizer_03/ "Пример 10.3. Моделирование поведения по умолчанию с  boost::char_separator") ведет себя как  [пример 10.1](http://theboostcpplibraries.com/boost.tokenizer#ex.tokenizer_01/ "Пример 10.1. Инициализация boost::char_separator для применения повтора").

Третий параметр определяет, будут или не  будут отображаться пустые частичные выражения. Если два разделителя найдены вплотную, соответствующее частичное выражение пусто. По умолчанию, эти пустые выражения не отображаются. Используя третий параметр,поведение по умолчанию может быть изменено.
```
Пример 10.4. Инициализация <boost::char_separator> для отображения пустых частичных выражений
```
`#include <boost/tokenizer.hpp>`  
`#include <string>`  
`#include <iostream>`  

int main()  
{  
  <typedef> boost::tokenizer<boost::char_separator<char>> tokenizer;  
  <std::string> s = "Boost C++ Libraries";  
  boost::char_separator<char> sep{" ", "+", boost::keep_empty_tokens};  
  tokenizer tok{s, sep};  
  <for> (<const auto> &t : tok)  
    <std::cout> << t << '\n';  
}
---
[Пример 10.4](http://theboostcpplibraries.com/boost.tokenizer#ex.tokenizer_04/ "Пример 10.4. Инициализация <boost::char_separator> для отображения пустых частичных выражений") отображает два дополнительных пустых частичных выражения. Первое из них находится между двумя знаками плюс, в то время как второе находится между вторым знаком плюс и следующим пространством.

```
Пример 10.5.Формат.Токенизатор с широкими строками
```
`#include <boost/tokenizer.hpp>`  
`#include <string>`  
`#include <iostream>`  

int main()  
{  
  <typedef> boost::tokenizer<boost::char_separator<wchar_t>,  
    <std>::wstring::const_iterator, std::wstring> tokenizer;  
  <std>::wstring s = L"Boost C++ Libraries";  
  boost::char_separator<wchar_t> sep{L" "};  
  tokenizer tok{s, sep};  
  <for> (<const auto> &t : tok)  
    <std::wcout> << t << '\n';  
}
---
[Пример 10.5](http://theboostcpplibraries.com/boost.tokenizer#ex.tokenizer_05/ "Пример 10.5.Формат.Токенизатор с широкими строками") перебирает строки типа  <std::wstring>.Для того, чтобы поддержать этот тип строки, токенизатор должен быть инициализирован с дополнительными параметрами шаблона. Класс <boost::char_separator> также должен быть инициализирован с <wchar_t>.

Кроме <boost::char_separator>, Формат.Токенизатор предоставляет два дополнительных класса для обнаружения частичных выражений.
```
Пример 10.6. Разбор CSV-файлов с  <boost::escaped_list_separator>
```
`#include <boost/tokenizer.hpp>`  
`#include <string>`  
`#include <iostream>`  

<int> main()  
{  
  <typedef> boost::tokenizer<boost::escaped_list_separator<char>> tokenizer;  
  <std::string> s = "Boost,\"C++ Libraries\"";  
  tokenizer tok{s};  
  <for> (<const auto> &t : tok)  
    <std::cout> << t << '\n';  
}
---
<boost::escaped_list_separator> используется для считывания нескольких значений,разделенных запятыми.Этот формат широко известен как CSV (значения, разделенные запятыми).  
<boost::escaped_list_separator> также обрабатывает двойные кавычки и управляющие последовательности. Таким образом, из [Примера 10.6](http://theboostcpplibraries.com/boost.tokenizer#ex.tokenizer_06/ "Пример 10.6. Разбор CSV-файлов с  boost::escaped_list_separator") выводятся поддержка и бибиотеки С++.

Второй класс предоставлен <boost::offset_separator>,который должен быть создан.Соответствующий объект должен быть передан в конструктор <boost::tokenizer> в качестве второго параметра.
```
 Пример 10.7. Перебор частичных выражений с помощью <boost::offset_separator>
```
`#include <boost/tokenizer.hpp>`  
`#include <string>`  
`#include <iostream>`  

int main()  
{  
  <typedef> boost::tokenizer<boost::offset_separator> tokenizer;  
  <std::string> s = "Boost_C++_Libraries";  
  <int> offsets[] = {5, 5, 9};  
  boost::offset_separator sep{offsets, offsets + 3};  
  tokenizer tok{s, sep};  
  <for> (<const auto> &t : tok)  
    <std::cout> << t << '\n';  
}
---
boost::offset_separator определяет местоположение в строке, где заканчиваются отдельные частичные выражения. [Пример 10.7](http://theboostcpplibraries.com/boost.tokenizer#ex.tokenizer_07/ " Пример 10.7. Перебор частичных выражений с помощью boost::offset_separator") указывает что первое частичное выражение заканчивается после 5 символов, второе заканчивается после 5 дополнительных символов, и третье заканчивается после 9 следующих символов. Будут выведены поддержка, С++ и библиотеки.

